15/02

---- HISTORIA DA COMPUTAÇÃO ----

- ENIAC (Primeiro computador programável)

* Era dos computadores atuais:

	- Fabricação dos circuitos internos

	- ALTAIR (1975)

	- BASIC (Bill Gates)

	- Apple II

	- IBM-PC (SO voltado à IBM)

	- Apple III

	- Lisa (primeiro computador com mouse - $10.000)

* Considerações sobre Ciencia da Computação (historicamente)

	- Alto consumo de recursos (energia, alto processamento de dados, local etc.)

	- Programas de processamento de dados

---- Introdução à lógica de programação ----

* O que é lógica de programação?

	- Problema: é uma questão que foge a uma determinada regra, ou melhor é um desvio de percurso, o qual impede de antigir um objetivo com eficiencia e eficacia.

	- Lógica: Organização e planejamento das instruções, assertivas em um algoritmo, a fim de viabilizar a implantação de um programa.	


* Técnicas de lógica programação

- Técnica linear: 

		- Modelo tradicional
	
		- Não tem vínculo:
			. Estrutura hierárquica
			. Programação de computadores

		- Execução sequenciada de eventos (ordenação de elementos por uma unica propriedade)
			. Unidimensional

- Técnica estruturada:

		- Organização, disposição e ordem dos elementos essenciais que compõem um corpo (concreto ou abstrato)

		- Facilita:
			. Escrita
			. Entendimento
			. Validação
			. Manutenção

- Técnica modular:

		- Controlada por um conjunto de regras 
			. Módulos/partes independentes			
		
		- Decompor um problema

			. Dados de entrada (instruções dadas)
				->
			. Processo de transformação (aplicação das instruções)
				->
			. Dados de saída (retornar instruções de maneira ordenada e prefixada)

		- Metas

			. Simplicação (segmentar problemas)
			. Decompor o problema (para resolver de maneira mais fácil)
			. Verificação do módulo

		- Problemas grandes em problemas menores (pensamento computacional)

---- Algoritmos ----

Processo de resolução de problemas passo a passo utilizando instruções

	- O que precisa ser feito?
					= Instruções
	- Qual a ordem de execução

* Desenvolvimento do programa

	. Análise:

		- Estudo e definição dos dados de entrada e saída

	. Algoritmo:

		- Descreve o problema por meio de ferramentas narrativas, fluxograma, ou pseudocódigo

	. Codificação:

		- O algoritmo é codificado de acordo com a linguagem de programação escolhida

* O que é?

	- Sequência de passos com objetivo definido

	- Execução de tarefas específicas (sem ambiguidade e objetivo)

	- Conjunto de operações que resultam em uma sucessão finita de ações

* Como construir um algoritmo (fase anterior à codificação)?

	. Compreender o problema
	. Definir dados de entrada (dados inseridos e dados inerentes ao cenário)
	. Definir processamento (como serão tratados os dados)
	. Definir dados de saída (dados resultantes de uma fase posterior ao processamento; as vezes, pode ser também o contrário, a previsibilidade de um resultado esperado)
	. Utilizar um método de construção (narrativa, fluxograma, pseudocódigo)
	. Teste e diagnóstico (construir e refinar algoritmo)	
	
		. Narrativa: Utilização da linguagem natural (interpretações diferentes)
		. Fluxograma: Utilização de símbolos pré-definidos (conhecimento prévio da estrutura e símbolos)
		. Pseudocódigo: Portugol (Passos a serem seguidos/regras definidas)

* Fundamentos de algoritmos

	. Tipos de dados: 

		- Dados: Tratados e processados (númericos, caracteres e lógicos)
		- Instruções: 

			. Operações:

				(Operadores: binário e unário (utilizado em inversões de sinais))
			. Linguagem de palavras-chave (vocabulário) de uma determinada programação que tem por finalidade comandar um computador que irá tratar os dados (palavras reservadas).
				. Entrada, processamento e saída

			. Funções:

				- Funções, ou sub-rotinas são blocos de instruções que realizam tarefas específicas 

				. modularização do problema
				. código mais claro e conciso
				. reutilização de instruções

				- Blocos de instruções (código), identificados por nomes e parâmetros

				. não repetir nome
				. invocação (chamar função)
				. variavel local (pode ter ou não; são destruídas ao encerrar a função)
				. altera o estado do programa
	
			. Entrada/Saída:

				- Consiste na impressão dos dados do mundo abstrato, digital por meio de ação de alguma interface

				- Os formatos podem variar desde simples arquivos binários até complexas queries de banco de dados

				- Saida programada: condicional (aguarda o dispositivo)
	
				- Saida por interrupção: incondicional			

				Saída na programação: código

					Casos: bem-sucedida; erro de sintaxe ou outro; erros de programação; problemas com a interface

---- Linguagem de Programação ----

* Problemas computacionais:

	- objeto de discussão que possui instruções passo a passo que são mais facilmente resolvíveis em ambiente computacional
	
		. problemas de otimização (maximizar ou minimizar uma determinada função; ex: custo)

		. problemas de busca (ex: x está em A?)
			. recorrente em teoria de grafos (ex: clique)

		. problemas de decisão/problema decidível (ex: dado um numero n inteiro positivo, determine se n é primo)

* O que é?

	- Método padronizado composto por um conjunto de regras sintáticas e semânticas de implementação de um código fonte (conjunto de palavras com regras). 

		. Traduzida ou interpretada (mas há de ser entendido)

* Como um computador entende o programa?

	- um programa é um amontoado de palavras senão for possível que o computador entenda

		. processo de tradução 

		* Tradução (ex.):
	
			- Linguagem de alto nível (programa fonte) -> Compilador (verificar se o programa executará sem erro ou não, sendo o mesmo não previsto pelo compilador) -> Código que o computador entende (programa objeto)

			1 - Geração do programa objeto
			2 - Execução do programa objeto

			- Execução mais rápida

		* Interpretação:

			- Programa fonte executado diretamente 

			- Programas menores
			- Maior flexibilidade

* Características de um programa:

	* Legiblidade (estado que é legível): 

		. Facilidade de leitura
		. Compreensão
		. Ortogonalidade (coerência na escolha de instruções)
		. Definição adequada das estruturas		

	* Redigibilidade:

		. Pode conflitar com a legibilidade
		. Ortogonalidade
		. Simplicidade da escrita
		. Suporte à abstração (consiga utilizar sub-rotinas/funções)
		. Reuso do código
		. Expressividade (ex: operador++; uso do for)

	* Confiabilidade (faz o que foi programado para fazer):

		. Verificação de tipos
		. Trata exceções
		. Uso de ponteiros (referencia de variavel menor)
		. Compatibilidade entre compiladores

	* Custo (Análise de impacto):

		. Treinamento
		. Codificação
		. Compilação
		. Execução
		. Infra-estrutura	

	* Outras características:

		. Atualizações (constantes)
		. Uso para IA
		. Disponibilidade de ferramentas
		. Comunidade ativa
		. Adoção pelo mercado

* Análises de código:

	- Compilador:

		. lexical analyzer -> syntax analyzer -> semantic analyzer

		* Análise léxica (i.e. conjunto dentro de um determinado idioma): 

			Particionar (elementos denominados tokens) -> Classificar (identificadores, palavras reservadas, números, strings (ex: print; palavra reservada) -> Eliminar (caracteres de espaços em branco, comentários etc.)

		* Análise sintática (i.e. verificar corretude do programa; escrita dos códigos; forma): 

		* Análise semântica (i.e. lógica do programa; significado)

* Paradigmas de programação

	- O que é?

		. Forma de resolução de problemas com diretrizes e limitações específicas de cada paradigma utilizando linguagens de programação
	
	* Classificação:

		. Orientação a objeto (abstração que trata o programa com base em classe e objetos)
		. Procedural (chamadas sucessivas e procedimentos separados; procedimentos: funções etc)	
		. Funcional (instruções são baseadas em funções)
		. Estruturado (estrutura de blocos aninhados)
		. Computação distribuída (funções executadas de forma independente)
		. Lógico

	* Paradigma estruturado>

		- Conceitos:

			. Sequência
			. Decisão (teste lógico)
			. Iteração (funções, laçoes, condições)

		- Utilização:

			. Problemas simples e diretos
			. Aprender programação
			(POO ainda não compreendida por muitos)
		
	* Orientação a objeto:
	
			. Análogo ao mundo real (objetos e a interação entre eles)

			- Objeto: descrito por características específicas, comportamentos e estado

			* Classe:

				- Alocação em memória
				- Operações associadas (métodos etc.)

				- Método: função determinada dentro de uma classe

	* POO: Reuso de código (por conta de heranças etc.)
	* PE: Trata de problemas específicos e diretos 

---------

* ANOTAÇÕES

Problemas grandes em problemas menores (pensamento computacional);

Livros:

	José Augusto Manzano, Algoritmos - lógica para desenvolvimento de programação de computadores, Ed. Érica, 17a ed. (ou mais recente) - livro de referência

	Ana Fernandes Ascencio, Fundamentos da programação de computadores - algoritmos, Pascal, C/C e Java, Ed. Pearson, 2a ed.

	Andrew S. Tanenbaum, "Livro Organização Estruturada de Computadores", Ed Pearson, 5a edição -- Capítulo 1

	The Formal Semantics of Programming Language, Glynn Winskel Deitel e Deitel, "C+= How to Program", 5th edition, Editora Prentice Hall, 2005 -- Capítulo 1

	Waldemar Celes, Renato Cerqueira e José Lucas Rangel, "Introdução a Estrutura de Dados com Técnica de Programação em C", Editora Campus-Elsevier, 2004 -- Capítulo 1

Sites: 

	www.inf.ufes.br/~tavares/labcomp2000/aulas.htm
	www.dca.fee.unicamp.br/cursos/EA876/apostila/HTML
	www.inf.ufes.br/~tavares/labcomp2000/aula1.htm